<?xml version="1.0" encoding="UTF-8"?>
<project name="Build File" basedir="." default="build-release">

    <!--location of property file -->
    <property file="${basedir}/ant/build.properties" description="your specific properities for builds" />
    	
    <!-- additional tasks -->
	<taskdef resource="flexTasks.tasks" classpath="${FLEX_TASKS}" />
	
	<!-- github upload -->
	<path id="ant.libs">
        <fileset dir="${ANT_DIR}/tasks/" includes="**/*.jar" />
    </path>
    <taskdef name="github-download-file-upload" 
        classname="de.hopa.github.fileupload.GithubDownloadFileUploadTask" 
        classpathref="ant.libs"/>
	
    <!--


       Build


   -->
	
    <target name="build-release" description="compiles application">
		<echo message="build-release"/>
        <antcall target="init"/>
        <antcall target="package"/>
        <antcall target="github-upload"/>
        <antcall target="cleanup"/>
    </target>
	
    <target name="compile"
        description="Compiles the AIR application to a SWF file and places SWF in a temp directory to be packaged.">
    	<echo message="compile"/>
    	<mxmlc      file="${SOURCE_DIR}/${APP_NAME}.${APP_EXTENSION}"
        			output="${BUILD_DIR}/${APP_NAME}.swf"
    	            actionscript-file-encoding="UTF-8"
    	            keep-generated-actionscript="false"
    	            incremental="true"
    	        >
    	            <!-- Get default compiler options. -->
    				<load-config filename="${FLEX_HOME}/frameworks/air-config.xml"/>

    	            <!-- List of path elements that form the roots of ActionScript
    	            class hierarchies. -->
    	            <source-path path-element="${FLEX_HOME}/frameworks"/>

    	            <!-- List of SWC files or directories that contain SWC files. -->
    	            <compiler.library-path dir="${FLEX_HOME}/frameworks" append="true">
    	                <include name="libs" />
    	            </compiler.library-path>
					
		            <compiler.library-path dir="${basedir}/libs" append="true">
		                <include name="*.swc" />
		            </compiler.library-path>

    		        <!-- Set size of output SWF file. -->
    	            <default-size width="1000" height="1000" />
    	        </mxmlc>
    </target>

    <target name="certificate" unless="CERTIFICATE_FLAG">
    	<echo message="certificate"/>
        <java jar="${ADT}" fork="true"
            failonerror="true">
            <arg value="-certificate"/>
            <arg value="-cn"/>
            <arg value="${CERT_NAME}"/>
            <arg value="-ou"/>
            <arg value="${CERT_ORG_UNIT}"/>
            <arg value="-o"/>
            <arg value="${CERT_ORG_NAME}"/>
            <arg value="-c"/>
            <arg value="${CERT_COUNTRY}"/>
            <arg value="${CERT_KEY_TYPE}"/>
            <arg value="${KEYSTORE}"/>
            <arg value="${CERT_PASSWORD}"/>
        </java>
    </target>

    <target name="package" 
    	depends="compile, certificate, injectVersion"
        description="Packages the build SWF file from a temp directory.">
    	<echo message="package"/>
        <java jar="${ADT}" fork="true"
            failonerror="true"
            maxmemory="512m">
        	<arg value="-package"/>
            <arg value="-storetype"/>
            <arg value="${STORETYPE}"/>
            <arg value="-keystore"/>
            <arg value="${KEYSTORE}"/>
            <arg value="-storepass"/>
            <arg value="${CERT_PASSWORD}"/>
            <arg value="${RELEASE_DIR}/${APP_NAME}.air"/>
            <arg value="${SOURCE_DIR}/${APP_NAME}-app.xml"/>
            <arg value="-C"/>
            <arg value="${BUILD_DIR}"/>
            <arg value="${BUILD_DIR}/${APP_NAME}.swf"/>
			
        </java>
    </target>

    <target name="init" depends="clean"
    description="Cleans the deploy file">
        <mkdir dir="${BUILD_DIR}"/>
        <mkdir dir="${RELEASE_DIR}"/>
        <available file="${KEYSTORE}" property="CERTIFICATE_FLAG"/>
    </target>

    <target name="clean"
        description="Cleans up old files.">
        <delete dir="${BUILD_DIR}" failOnError="false" includeEmptyDirs="true" />
        <delete dir="${RELEASE_DIR}" failOnError="false" includeEmptyDirs="true" />
    </target>

    <target name="cleanup"
        description="Cleans up old files.">
        <delete dir="${BUILD_DIR}" failOnError="false" includeEmptyDirs="true" />
    </target>


	<target name="injectVersion">
		   
		
		<exec executable="bash" output="${ANT_DIR}/version.properties" outputproperty="git.describe">
		    <arg value="-c"/>
		    <arg value="git describe"/>
	  	</exec>
		<exec executable="bash" output="${ANT_DIR}/version.properties" outputproperty="git.tag">
		    <arg value="-c"/>
		    <arg value="git tag -l '*.*' | sort -g -r | head -n1"/>
	  	</exec>
		<exec executable="bash" output="${ANT_DIR}/version.properties" outputproperty="git.description">
		    <arg value="-c"/>
		    <arg value="git log --pretty=format:' - (%ar) %s' HEAD...${git.tag}"/>
	  	</exec>
		<exec executable="bash" output="${ANT_DIR}/version.properties" outputproperty="git.revision">
		    <arg value="-c"/>
		    <arg value="git log --pretty=format:' - (%ar) %s' HEAD...${git.tag} | wc -l"/>
	  	</exec>
		<exec executable="bash" output="${ANT_DIR}/version.properties" outputproperty="git.revision-total">
		    <arg value="-c"/>
		    <arg value="git rev-list --all | wc -l"/>
	  	</exec>
		
		<echo message=" - git.describe[${git.describe}]"/>
		<echo message=" - git.tag[${git.tag}]"/>
		<echo message=" - git.revision[${git.revision}]"/>
		<echo message=" - git.revision-total[${git.revision-total}]"/>
		<echo message=" - git.description[${git.description}]"/>

		<propertyfile file="${ANT_DIR}/version.properties" comment="My properties">
			<entry  key="build.date" type="date" value="now" pattern="MMM dd yy hh:mm aa"/>
			<entry  key="git.description" type="string" value="${git.description}"/>
			<entry  key="git.tag" type="string" value="${git.tag}"/>
			<entry  key="git.revision" type="string" value="${git.revision}"/>
			<entry  key="git.revision-total" type="string" value="${git.revision-total}"/>
		</propertyfile>
			
		<!-- FSMBuilder-app.xml > app descriptor file -->
		<delete file="${SRC_DIR}/FSMBuilder-app.xml" quiet="true"/>
		<copy file="${ANT_DIR}/FSMBuilder-app.xml.template" tofile="${SRC_DIR}/FSMBuilder-app.xml" />
		
		<replace file="${SRC_DIR}/FSMBuilder-app.xml" value="${ANT_DIR}/version.properties" propertyFile="${ANT_DIR}/version.properties">
  			<replacefilter token="@build.date@" property="build.date"/>
  			<replacefilter token="@git.description@" property="git.description"/>
  			<replacefilter token="@git.tag@" property="git.tag"/>
  			<replacefilter token="@git.revision@" property="git.revision"/>
  			<replacefilter token="@git.revision-total@" property="git.revision-total"/>
		</replace>
			
		 <!-- update.xml > autoupdater file -->
		<delete file="${UPDATER_DIR}/update.xml" quiet="true"/>
		<copy file="${ANT_DIR}/update.xml.template" tofile="${UPDATER_DIR}/update.xml" />
	
		<replace file="${UPDATER_DIR}/update.xml" value="build.number" propertyFile="${ANT_DIR}/version.properties">
			<replacefilter token="@build.date@" property="build.date"/>
  			<replacefilter token="@git.description@" property="git.description"/>
  			<replacefilter token="@git.tag@" property="git.tag"/>
  			<replacefilter token="@git.revision@" property="git.revision"/>
  			<replacefilter token="@git.revision-total@" property="git.revision-total"/>
		</replace>
					
	</target>
	
	<target name="github-upload">
		<property file="${ANT_DIR}/version.properties"/>
		<github-download-file-upload 
            user="matthewhare"
            password="speedy007"
            repositoryowner="matthewhare"
            repositoryname="fsmbuilder"
            fileurl="${UPDATER_DIR}/update.xml"
			fileDescription="latest build update.xml (${git.tag}.${git.revision}.${git.revision-total})"
            override="true"/>
		<github-download-file-upload 
            user="matthewhare"
            password="speedy007"
            repositoryowner="matthewhare"
            repositoryname="fsmbuilder"
            fileurl="${RELEASE_DIR}/FSMBuilder.air"
			fileDescription="latest build (${git.tag}.${git.revision}.${git.revision-total})"
            override="true"/>
	</target>
</project>